;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; init-faces.el
;; Justin R. St-Amant, 2017-02-18
;;
;; Commentary:
;;
;; This file is strongly based off Kaleb Elwert's work in the
;; base16-emacs repository
;; , https://github.com/belak/base16-emacs/
;;
;; The main reason for using the code from the base16-emacs repository
;; is for documentation purposes. I didn't feel like the code in the
;; repository was properly documented, so I rewrote it to my needs and
;; standards.
;;
;; The other reason for using the code was for my own
;; customization. The themes generated by the base16-emacs repository
;; worked, but the settings made org-mode and many other faces too
;; un-coordinated. UNFINISHED
;;
;; UNFINISHED.
;;
;; This file does not actually provide a theme that can be loaded
;; using M-x load-theme. I will need to look more into this and see
;; what I want to do.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(set-face-attribute 'default nil :height 100)

;; Do not inherit any colors or settings from X resources
(setq inhibit-x-resources t)

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Variables / Color sets / Faces
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar tinman-base16-colors
  '(:base00  "#2d2d2d"  ; grey18
    :base01  "#393939"  ; grey22
    :base02  "#515151"  ; grey32
    :base03  "#747369"  ; grey45
    :base04  "#a09f93"  ; grey62
    :base05  "#d3d0c8"  ; grey82
    :base06  "#e8e6df"  ; grey92
    :base07  "#f2f0ec"  ; grey94
    
    :black   "grey18"
    :red     "tomato"   ;"#f2777a" or "light coral"
    :green   "DarkSeaGreen3" ;"#99cc99" or "PaleGreen3" or "LimeGreen" or "LightGreen"
    :yellow  "gold"  ; "#ffcc66" or "gold" or "goldenrod1"
    :blue    "CornflowerBlue" ; "#6699cc" or "SkyBlue3" or "SteelBlue3"
    :magenta "plum3" ; "#cc99cc" or "orchid"
    :cyan    "CadetBlue3" ; "#66cccc" or "MediumTurquoise" or "DarkSlateGray3"
    :white   "gainsboro"
    
    :orange  "salmon1"  ; "#f99157" or "SandyBrown" or "DarkOrange1"
    :brown   "LightSalmon3") ; "#d27b53" or "peru" or "LightSalmon3" or tan3
  "Color palette for Justin St-Amant's Base16-inspired theme.

All colors are currently set to the Base16 Eighties colors.
i.e. soft-grey background with pastel foreground colors.")

(defvar base16-shell-colors
  '(:base01 "brightgreen"
    :base02 "brightyellow"
    :base03 "brightblack"
    :base04 "brightblue"
    :base05 "white"
    :base06 "brightmagenta"
    :base07 "brightwhite"

    :black   "black"
    :red     "red"
    :green   "green"
    :yellow  "yellow"
    :blue    "blue"
    :magenta "magenta"
    :cyan    "cyan"
    :white   "white"

    :orange  "yellow"
    :brown   "red")
  "Base16 colors for use in a terminal.
i.e. with a limited color palette.

UNIMPLEMENTED YET")

(defvar custom-faces
  '((default :foreground white :background black)
    (link :foreground cyan)
    (font-lock-comment-face  :foreground cyan)
    (font-lock-constant-face :foreground orange)
    (font-lock-keyword-face  :foreground magenta)
    (font-lock-string-face   :foreground green)
    (outline-1 :foreground blue)
    (outline-2 :foreground yellow)
    (org-todo :foreground red)
    (org-done :foreground green)
    ;; (org-agenda-structure :foreground base0D)
    ;; (org-special-keyword :foreground base0C)
    ;; (org-link :foreground base0C)
    (term-color-black :foreground black)
    (term-color-red :foreground red)
    (term-color-green :foreground green)
    (term-color-yellow :foreground yellow)
    (term-color-blue :foreground blue)
    (term-color-magenta :foreground magenta)
    (term-color-cyan :foreground cyan)
    (term-color-white :foreground white))
    ;; (highlight :background base03)
    ;; (ledger-font-payee-uncleared-face :foreground base08)
    ;; (ledger-font-other-face :foreground base04)
  ;; (ledger-font-pending-face :foreground base09))
  "A list of faces, and the attributes to apply to them.

The format of this list is as follows:
(face . plist)
(face . plist)
(face . plist)
...

Where face is the name of the face, and plist is a plist of
attributes taking the form:
(attribute value attribute value ... )

Example:
(:foreground \"#00ff00\" :background \"#000000\")

See macro `defface', and look into \"face specs\" or \"face
attributes\" for more info.

Possible attributes can be found in Info node `(elisp)Face Attributes'.")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Theme-generation functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun initialize-theme (faces)
  "DOCUMENTATION INCOMPLETE"
  (apply 'custom-set-faces (mapcar 'apply-face-spec faces)))

(defun apply-face-spec (face)
  "DOCUMENTATION INCOMPLETE Applies a face spec to a `FACE' for
use with `custom-set-faces' or `custom-theme-set-face'. From a
list containing the face symbol, and a plist of attributes."
  (let ((name       (car face))
        (attributes (cdr face)))
    (list name (list (list '((min-colors 256)) (sub-color-keys attributes))
                     (list t                   (sub-color-keys attributes))))))

(defun sub-color-keys (attributes)
  "DOCUMENTATION INCOMPLETE Substitutes custom color names to
color strings. Also does not work with constants or muliple
attributes yet. Potentially does not work with :box or :underline
attributes."
  (let ((output))
    (while attributes
      (let* ((key   (car attributes))
             (value (cadr attributes))
             (color-key (if (symbolp value) (intern (concat ":" (symbol-name value)) nil)))
             (color (plist-get tinman-base16-colors color-key)))
        (cond (color
               (setq output (append output (list key color))))
              (t
               (setq output (append output (list key value)))))
        ;; Proceed to the next set of attributes
        (setq attributes (cddr attributes))))
      output))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;(sub-color-keys '(:foreground "#ffffff" :background "#000000" :height 100))

;; Add all the faces to the theme
(initialize-theme custom-faces)

(provide 'init-faces)
