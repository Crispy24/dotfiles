#+title: Emacs configuration

* Init
Let's start by initializing/loading anything that must be set before
the rest of the configuration file. Not everything in this section is
nicely sorted.

#+begin_src emacs-lisp
(add-to-list 'load-path (expand-file-name "lisp" user-emacs-directory))

;; Load my customizations
(setq custom-file "~/.emacs.d/custom.el")
(load custom-file)

;; Initialize Emacs package manager
(require 'package)
(add-to-list 'package-archives '("gnu"   . "http://elpa.gnu.org/packages/"))
(add-to-list 'package-archives '("melpa" . "http://melpa.org/packages/"))
(package-initialize)

;; Require use-package, and install it if necessary
(if (not (require 'use-package "use-package" t))
    (progn (package-refresh-contents)
           (package-install 'use-package)))

(setq user-full-name "Justin St-Amant")

(defvar using-windows
  (equal window-system 'w32)
  "t if emacs is running in windows")

(defvar drive-directory
  (if (not using-windows)
      "~/drive/"
    (let ((userprofile (replace-regexp-in-string "\\\\" "/" (getenv "USERPROFILE"))))
      (concat userprofile "/Google Drive/")))
  "The absolute path to the Google Drive directory under Linux or Windows.")

(defvar onedrive-directory
  (if using-windows
      (let ((userprofile (replace-regexp-in-string "\\\\" "/" (getenv "USERPROFILE"))))
        (concat userprofile "/OneDrive - Manitoba Hydro/")))
  "The absolute path to your work OneDrive directory. Only for Windows.")

(if using-windows
    (setenv "HOME" (getenv "USERPROFILE")))

(defun at-work ()
  "t if using a work computer."
  (equal "MH" (substring (system-name) 0 2)))
(defun at-home ()
  "t if using a non-work computer."
  (not (at-work)))

(defun init ()
  "Shortcut for finding your Emacs configuration file.
Since I've implemented a literate configuration file, my init.el
points to another file."
  (interactive)
  (find-file "~/.emacs.d/configuration.org"))

;; Enable some pre-disabled commands
(put 'downcase-region 'disabled nil)
(put 'upcase-region 'disabled nil)
(put 'scroll-left 'disabled nil)
(put 'narrow-to-region 'disabled nil)

;; Set backup and auto-save file location
(setq backup-directory-alist
      `((".*" . ,temporary-file-directory)))
(setq auto-save-file-name-transforms
      `((".*"   ,temporary-file-directory t)))
#+end_src

* Interface
Set and configure the numerous themes, colors, and graphical elements
to my liking and use of Emacs.

#+begin_src emacs-lisp
;; Do not inherit any colors or settings from X resources
(setq inhibit-x-resources t)
;; Start emacs maximized, WM doesn't seem to control the frame size initially
(add-to-list 'default-frame-alist '(fullscreen . maximized))
;; Disable GUI elements
(menu-bar-mode -1)
(tooltip-mode -1)
(scroll-bar-mode -1)
(tool-bar-mode -1)
(setq inhibit-splash-screen t) ; Disable startup messages

;; Sound settings
(setq ring-bell-function 'ignore) ; Turn off audible bell

;; Theme settings
(add-to-list 'custom-theme-load-path "~/.emacs.d/lisp/") ;; Only required for my own theme
;;(load-theme 'tinman16-eighties t)
;; Required; can't be set through the theme. Emacs bug, I think.
;;(set-face-attribute 'default nil :height 100)

;; Indentation settings
(setq-default indent-tabs-mode nil)
(setq-default tab-width 4)

;; Miscellaneous settings
(setq scroll-preserve-screen-position t) ; Keep point position on screen when scrolling
(setq show-trailing-whitespace t)

;;;; THEME
(use-package base16-theme
  :ensure t
  :config
  (load-theme 'base16-eighties t))
;;;; SMART MODE-LINE SETTINGS
(use-package smart-mode-line
  :ensure t
  :config
  (setq sml/theme 'dark)
  ;; Enable line numbering and column numbering
  (setq line-number-mode t)
  (setq column-number-mode t)
  ;; Enable smart mode-line (required)
  (sml/setup))

#+end_src

* Package settings
Here are all the packages I use or for which I have settings.

#+begin_src emacs-lisp
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; PACKAGES
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
#+end_src

** help-mode
#+begin_src emacs-lisp
;;;; HELP-MODE SETTINGS
(use-package help-mode
  :bind (:map help-mode-map
              ;; Some additional navigation bindings
              ("n" . next-line)
              ("p" . previous-line)
              ("f" . forward-char)
              ("b" . backward-char)
              ("a" . move-beginning-of-line)
              ("e" . move-end-of-line)
              ("v" . scroll-up-command)
              ("V" . scroll-down-command)
              ("C-d" . scroll-up-command)))
#+end_src

** ledger
#+begin_src emacs-lisp
;;;; LEDGER SETTINGS
(use-package ledger-mode
  :ensure t
  :mode "\\.ledger$"
  :config
  (setq ledger-default-date-format ledger-iso-date-format) ; YYYY-MM-DD
  (setq ledger-highlight-xact-under-point nil)
  (setq ledger-mode-should-check-version nil)
  (add-to-list 'ledger-reports
               '("uncleared" "%(binary) -f %(ledger-file) reg --uncleared")))
;; See (calc-fix-notation N)

(use-package ledger-report
  :bind (:map ledger-report-mode-map
              ("n"   . next-line)
              ("p"   . previous-line)
              ("TAB" . ledger-report-visit-source)))

(defun ledger ()
  "Shortcut for finding my ledger file, and navigating to the end
of the buffer."
  (interactive)
  (find-file (concat drive-directory "reference/finances/finances.ledger"))
  (end-of-buffer))
#+end_src

** magit
#+begin_src emacs-lisp
;;;; MAGIT SETTINGS
(use-package magit
  :ensure t
  :bind ("C-x g" . magit-status)
  :init
  (when using-windows
    (setq magit-git-executable "c:/Program Files/Git/bin/git.exe")))
#+end_src

** markdown-mode
#+begin_src emacs-lisp
;;;; MARKDOWN SETTINGS
(use-package markdown-mode
  :ensure t)
#+end_src

** paren-mode
#+begin_src emacs-lisp
;;;; PAREN SETTINGS
(use-package paren
  :bind ("C-x p" . show-paren-mode))
#+end_src

** pkgbuild-mode
By the way: I use Arch.

#+begin_src emacs-lisp
;;;; PKGBUILD SETTINGS
(use-package pkgbuild-mode
  :ensure t
  :config
  (setq pkgbuild-update-sums-on-save nil))
#+end_src

** sh-mode
#+begin_src emacs-lisp
;;;; SHELL-SCRIPT SETTINGS
(use-package sh-script
  :config
  (setq sh-basic-offset 2)
  (add-hook 'sh-mode-hook (lambda () (sh-set-shell "bash"))))
#+end_src

** term
#+begin_src emacs-lisp
;;;; TERM SETTINGS
(use-package term)
#+end_src

** auctex
#+begin_src emacs-lisp
;;;; AUCTEX SETTINGS
(use-package tex-site
  :ensure auctex)
#+end_src

** view-mod
#+begin_src emacs-lisp
;;;; VIEW MODE
(use-package view
  :ensure t
  :bind ("C-x v" . view-mode))
#+end_src

** web-mode
#+begin_src emacs-lisp
;;;; WEB SETTINGS
(use-package web-mode
  :ensure t
  :mode
  "\\.css$"
  "\\.htaccess$"
  "\\.html?$"
  "\\.twig$"
  "\\.php$"
  "\\.xml$"
  :config
  ;; Make .html files recognize Twig templates by default
  (setq web-mode-engines-alist '(("twig" . "\\.html$")))
  ;; web-mode indentation settings
  (setq web-mode-markup-indent-offset 2)
  (setq web-mode-css-indent-offset 2)
  (setq web-mode-code-indent-offset 2))
#+end_src

** calc
#+begin_src emacs-lisp
;;;; CALC SETTINGS
(use-package calc
  :bind ("C-x c" . calc))
#+end_src

** dired
#+begin_src emacs-lisp
;;;; DIRED SETTINGS
(use-package dired
  :config
  (put 'dired-find-alternate-file 'disabled nil)
  :bind (:map dired-mode-map
              ("C-s" . dired-isearch-filenames)))
#+end_src

** evil-mode
#+begin_src emacs-lisp
;;;; EVIL SETTINGS
(defvar using-evil nil
  "Set to t   if you are using evil-mode.\nSet to nil if you are not.")
(defun init-evil ()
    "Load and configure packages related to evil-mode."
    (use-package evil-leader
      :ensure t
      :init
      (setq evil-want-C-u-scroll t) ; required before loading evil
      (setq evil-want-keybinding nil)) ; required if evil-collection will be used
    (use-package evil
      :ensure t
      :init
      :config
      (global-evil-leader-mode)
      (evil-set-initial-state 'help-mode 'emacs)
      (evil-set-initial-state 'dired-mode 'emacs)
      (evil-mode 1))
    (use-package evil-collection
      :ensure t
      :after evil
      :config
      (evil-collection-init))
    (use-package evil-org
      :ensure t
      :after org
      :config
      (add-hook 'org-mode-hook 'evil-org-mode)
      (add-hook 'evil-org-mode-hook
                (lambda ()
                  (evil-org-set-key-theme)))
      (require 'evil-org-agenda)
      (evil-org-agenda-set-keys)))

(if using-evil init-evil nil)
#+end_src

** org-mode

#+begin_src emacs-lisp
;;;; ORG-MODE SETTINGS

;; Ensure org is loaded explicitly, and not lazily
(use-package org
  :ensure t)
(defalias 'o 'org-mode)
;; TODO Ensure org-capture is loaded explicitly, and not lazily

;; Set priorities in org to numeric priorities
(setq org-highest-priority ?1)
(setq org-lowest-priority ?5)
(setq org-default-priority ?5)
;; Set priority faces to be color-coded like in Todoist
;; TODO get this to automatically assign colors from the current theme
(setq org-priority-faces
      '((?1 . "orangered")
        (?2 . "darkorange")
        (?3 . "cornflowerblue")
        (?4 . "darkgray")))

;; Some general org-mode preferences and global options
(setq org-todo-keywords
      '((sequence "TODO(t)" "STARTED(s)" "WAITING(w)"
                  "|" "DONE(d)" "CANCELLED(c)")))
(put 'org-toggle-time-stamp-overlays 'disabled
     "I don't use timestamp overlays.\n
This command is usually invoked as an accident.\n")
(setq org-refile-targets '((nil . (:level . 1))
                           (nil . (:tag . "project"))))
(setq org-src-fontify-natively t) ; Fontify source blocks
(set-face-foreground 'org-block (face-attribute 'default :foreground))
(setq org-src-tab-acts-natively t) ; Allow proper indentation of code blocks
(setq org-edit-src-content-indentation 0)

;; Aliases for finding your main org file, provided it is an agenda file
(defalias 'gtd  'org-cycle-agenda-files)
(defalias 'work 'org-cycle-agenda-files)
(defalias 'w    'org-cycle-agenda-files)

;; Settings for a clean view
(setq org-adapt-indentation nil) ; Promotes and demotes headings like org used to

;; Set org-directory, agenda files, and main org files
;;Implement some kind of also do a function for 'at home' or 'at work' boolean
;; TODO use org-agenda-file-to-front to bring the default
;; I should also bind org-cycle-agenda-files (C-' and C-,) globally
(if (at-work)
    (progn
      (setq org-directory onedrive-directory)
      (add-to-list 'org-agenda-files (concat org-directory "work.org"))))
(if (at-home)
    (progn
      (setq org-directory drive-directory)
      (add-to-list 'org-agenda-files (concat org-directory "gtd.org"))))
;; DISABLED - set agenda files via C-c [ org-agenda-file-to-front
;; (setq org-agenda-files '())
;; (dolist (file org-files)
;;   (if (file-exists-p (concat org-directory file))
;;       (add-to-list 'org-agenda-files (concat org-directory file))))

;; Disable tag inheritance, because I don't make use of it
(setq org-use-tag-inheritance nil)

;; Org-agenda settings
(global-set-key "\C-ca" 'org-agenda)
(setq org-deadline-warning-days 7)
(setq org-agenda-skip-deadline-prewarning-if-scheduled t)
(setq org-agenda-scheduled-leaders '("" ""))
(setq org-stuck-projects
      '("+project" ("TODO" "STARTED") nil ""))

(setq org-agenda-custom-commands
      '(("d" "Daily report" ; This one is special, it's a composite agenda
         ((tags-todo
           "-TODO\"WAITING\""
           ((org-agenda-overriding-header "Prioritized todo list")))
          (todo
           "WAITING"
           ((org-agenda-overriding-header "Waiting list")))))
        ("u" "Unscheduled"
         ((tags-todo "-TODO=\"WAITING\"-SCHEDULED<>\"\""))
         ((org-agenda-sorting-strategy '(priority-down timestamp-up))
          (org-agenda-prefix-format " %-14:c")
          (org-agenda-overriding-header "Prioritized TODO list - unscheduled items")))
        ("x" "Agenda - upcoming" agenda ""
         ((org-agenda-span 30)))
        ("r" "TODO list (r)eport"
         ((tags-todo "-TODO=\"WAITING\""))
         ((org-agenda-sorting-strategy '(priority-down timestamp-up))
          (org-agenda-prefix-format " %-14:c")
          (org-agenda-overriding-header "Prioritized TODO list")))
        ("w" "WAITING items" todo "WAITING"
         ((org-agenda-overriding-header "WAITING list")
          (org-agenda-prefix-format " ")
          (org-agenda-sorting-strategy '((tsia-up)))))
        ("i" "Incomplete items" todo "STARTED"
         ((org-agenda-sorting-strategy '((todo tag-up)))))
        ("P" "List of active projects" tags "project"
         ((org-agenda-sorting-strategy '((tags alpha-up)))))))

;; org-capture settings
(global-set-key "\C-cc" 'org-capture)
(global-set-key "\C-cl" 'org-store-link)

(setq org-capture-templates
      `(("t" "TODO" entry
         (file+headline ,(car org-agenda-files) "Tasks")
         "* TODO %^{Next-action description}\n%u%?")
        ("c" "Collect" entry
         (file+headline ,(car org-agenda-files) "In")
         "* %^{Brief description}\n%u%?")
        ("j" "Journal entry" plain
         (file+datetree "reference/journal.org")
         "TEXT\n\nWhat did I accomplish?\n- \n\nWhat did I learn?\n- \n\nWhat am I grateful for?\n- \n\n")))
#+end_src

