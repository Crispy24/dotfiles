;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; tinman16-theme.el
;; Justin R. St-Amant, 2017-02-18
;;
;; Commentary:
;;
;; NEEDS DOCUMENTATION; SCRAP ALL OF THIS!
;;
;; This file is strongly based off Kaleb Elwert's work in the
;; base16-emacs repository, https://github.com/belak/base16-emacs/
;;
;; The main reason for using the code from the base16-emacs repository
;; is for documentation purposes. I didn't feel like the code in the
;; repository was properly documented, so I rewrote it to my needs and
;; standards.
;;
;; The other reason for using the code was for my own
;; customization. The themes generated by the base16-emacs repository
;; worked, but the settings made org-mode and many other faces too
;; un-coordinated. UNFINISHED
;;
;; UNFINISHED.
;;
;; This file does not actually provide a theme that can be loaded
;; using M-x load-theme. I will need to look more into this and see
;; what I want to do.
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Variables / Color sets / Faces
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defvar base16-shell-colors
  '(:base01  "brightgreen"
    :base02  "brightyellow"
    :base03  "brightblack"
    :base04  "brightblue"
    :base05  "white"
    :base06  "brightmagenta"
    :base07  "brightwhite"

    :base01  "brightgreen"
    :base02  "brightyellow"
    :base03  "brightblack"
    :base04  "brightblue"
    :base05  "white"
    :base06  "brightmagenta"
    :base07  "brightwhite"
    :base08
    :base09
    :base0A
    :base0B
    :base0C
    :base0D
    :base0E
    :base0F

    :black   "black"
    :red     "red"
    :green   "green"
    :yellow  "yellow"
    :blue    "blue"
    :magenta "magenta"
    :cyan    "cyan"
    :white   "white"

    :orange  "yellow"
    :brown   "red")
  "Safe Base16 colors for use in a terminal.
i.e. with a limited color palette.

UNIMPLEMENTED YET? I broke this on 2019-05-24, and I don't think
it's implemented")

(defvar custom-faces
  '((default                 :foreground base05 :background base00)
    (link                    :foreground base08)
    (font-lock-builtin-face  :foreground base0C)
    (font-lock-comment-face  :foreground base03)
    (font-lock-constant-face :foreground base09)
    (font-lock-keyword-face  :foreground base0E)
    (font-lock-string-face   :foreground base0B)
    (font-lock-variable-name-face :foreground base08)
    (outline-1               :foreground base0D)
    (outline-2               :foreground base0A)
    (outline-3               :foreground base0E)
    (org-todo                :foreground base08)
    (org-done                :foreground base0B)
    ;; (org-agenda-structure    :foreground base0D)
    ;; (org-special-keyword     :foreground base0C)
    ;; (org-link                :foreground base0C)
    (term-color-black        :foreground base00)
    (term-color-red          :foreground base08)
    (term-color-green        :foreground base0B)
    (term-color-yellow       :foreground base0A)
    (term-color-blue         :foreground base0D)
    (term-color-magenta      :foreground base0E)
    (term-color-cyan         :foreground base0C)
    (term-color-white        :foreground base05))
    ;; (highlight               :background base03)
    ;; (ledger-font-payee-uncleared-face :foreground base08)
    ;; (ledger-font-other-face  :foreground base04)
  ;; (ledger-font-pending-face  :foreground base09))
  "A list of faces, and the attributes to apply to them.

The format of this list is as follows:
(face . attributes)
(face . attributes)
(face . attributes)
...

Where face is the name of the face, and attributes is a plist of
attributes taking the form:
(attribute value attribute value ... )

Example:
(:foreground \"#00ff00\" :background \"#000000\")

To identify faces for customization, use the `customize-face'
function.

See macro `defface', and look into \"face specs\" or \"face
attributes\" for more info.

Possible attributes can be found in Info node `(elisp)Face Attributes'.")

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Theme-generation functions
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(defun initialize-theme (theme-name colors faces)
  "Generates a theme from a plist of colors and a list of
font-faces with attributes to apply to them."
  ;;PROBLEM: custom-theme-set-faces needs the faces in seperate ARGS,
  ;;not in a single list, as I'm making with 'apply-face-spec
  (apply
   'custom-theme-set-faces
   theme-name
   (mapcar (lambda (face)
      (apply-face-spec colors face))
    faces)))

(defun apply-face-spec (colors face)
  "DOCUMENTATION INCOMPLETE Applies a face spec to each face in
`FACES', according to a list of `COLORS' to use. For use with
`custom-set-faces' or `custom-theme-set-face'. From a list
containing the face symbol, and a plist of attributes.  Returns a
list of elements of the form ___"
  (let ((name       (car face))
        (attributes (cdr face)))
    ;; The following can be shortened, one day...
    (list name (list (list '((min-colors 256)) (sub-color-keys attributes colors))
                     (list t                   (sub-color-keys attributes colors))))))

(defun sub-color-keys (attributes colors)
  "Substitutes color names in a plist to useable color strings.

Example: (:foreground red) gets converted to (:foreground
\"#ff0000\")

Does not support constants?? Untested.

Note: Untested with :box, :underline, and similar attributes."
  (let ((output))
    (while attributes
      (let* ((key   (car attributes))
             (value (cadr attributes))
             (color-key (if (symbolp value) (intern (concat ":" (symbol-name value)) nil)))
             (color (plist-get colors color-key)))
        (cond (color
               (setq output (append output (list key color))))
              (t
               (setq output (append output (list key value)))))
        ;; Proceed to the next set of attributes
        (setq attributes (cddr attributes))))
      output))

;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

(provide 'tinman16-theme)
